<div id="docs-content">
<!-- ============================== class title ============================ -->
	<h1 class="classTitle">
		
		Class pulse.Sprite
	</h1>

<!-- ============================== class summary ========================== -->
	<p class="description">
		
		Extends
			<a href="../symbols/pulse.Visual">pulse.Visual</a>.<br />
		

		The sprite object.

		
			<br /><span class="em">Defined in: </span> <a href="https://github.com/onmodulus/pulse/blob/master/lib/pulse/src\visual\sprite.js">/src\visual\sprite.js</a>
		
	</p>

<!-- ============================== constructor summary ==================== -->
	
	<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class pulse.Sprite.">
		<caption>Class Summary</caption>
		<thead>
			<tr>
				<th scope="col">Constructor Attributes</th>
				<th scope="col">Constructor Name and Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td class="attributes">&nbsp;</td>
				<td class="nameDescription" >
					<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#constructor">pulse.Sprite</a></b>(params)
					</div>
					<div class="description">Sprites are the basic object for moving, animated graphics onthe screen.</div>
				</td>
			</tr>
		</tbody>
	</table>
	

<!-- ============================== properties summary ===================== -->
	
		
		
		<table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class pulse.Sprite.">
			<caption>Field Summary</caption>
			<thead>
				<tr>
					<th scope="col">Field Attributes</th>
					<th scope="col">Field Name and Description</th>
				</tr>
			</thead>
			<tbody>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#dragDropEnabled">dragDropEnabled</a></b>
						</div>
						<div class="description">Determines if object can be drag and dropped</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#draggedOverItems">draggedOverItems</a></b>
						</div>
						<div class="description">The current items that are being dragged over this object</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#dragMoveEnabled">dragMoveEnabled</a></b>
						</div>
						<div class="description">Determines if the object actually moves when being dragged and dropped</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#dropAcceptEnabled">dropAcceptEnabled</a></b>
						</div>
						<div class="description">Determines if object can be dropped on this object</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#handleAllEvents">handleAllEvents</a></b>
						</div>
						<div class="description">Property that signifies if this sprite should handle all events.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&lt;static&gt; &nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						pulse.Sprite.<b><a href="../symbols/pulse.Sprite#.HIT_TEST_CONVEX">HIT_TEST_CONVEX</a></b>
						</div>
						<div class="description">Definition for hit test constant for convex shape checking.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&lt;static&gt; &nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						pulse.Sprite.<b><a href="../symbols/pulse.Sprite#.HIT_TEST_RECT">HIT_TEST_RECT</a></b>
						</div>
						<div class="description">Definition for hit test constant for rectangle checking.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#hitTestPoints">hitTestPoints</a></b>
						</div>
						<div class="description">The points to check against for checking if point is in bounds.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#hitTestType">hitTestType</a></b>
						</div>
						<div class="description">The type of hit testing to use.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#texture">texture</a></b>
						</div>
						<div class="description">The texture being used for this sprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#textureFrame">textureFrame</a></b>
						</div>
						<div class="description">The current frame slice for this sprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#textureFramePrevious">textureFramePrevious</a></b>
						</div>
						<div class="description">The previous texture frame slice for this sprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#texturePrevious">texturePrevious</a></b>
						</div>
						<div class="description">The previous texture being used for this sprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Sprite#textureUpdated">textureUpdated</a></b>
						</div>
						<div class="description">Whether the texture frame or texture has been updated.</div>
					</td>
				</tr>
			
			</tbody>
		</table>
		

		
		<dl class="inheritsList">
		<dt>Fields borrowed from class <a href="../symbols/pulse.Visual">pulse.Visual</a>: </dt><dd><a href="../symbols/pulse.Visual#actions">actions</a>, <a href="../symbols/pulse.Visual#alpha">alpha</a>, <a href="../symbols/pulse.Visual#alphaPrevious">alphaPrevious</a>, <a href="../symbols/pulse.Visual#anchor">anchor</a>, <a href="../symbols/pulse.Visual#anchorAngle">anchorAngle</a>, <a href="../symbols/pulse.Visual#anchorPrevious">anchorPrevious</a>, <a href="../symbols/pulse.Visual#anchorRadius">anchorRadius</a>, <a href="../symbols/pulse.Visual#bounds">bounds</a>, <a href="../symbols/pulse.Visual#boundsPrevious">boundsPrevious</a>, <a href="../symbols/pulse.Visual#canvas">canvas</a>, <a href="../symbols/pulse.Visual#events">events</a>, <a href="../symbols/pulse.Visual#invalidProperties">invalidProperties</a>, <a href="../symbols/pulse.Visual#mousein">mousein</a>, <a href="../symbols/pulse.Visual#position">position</a>, <a href="../symbols/pulse.Visual#positionPrevious">positionPrevious</a>, <a href="../symbols/pulse.Visual#positionTopLeft">positionTopLeft</a>, <a href="../symbols/pulse.Visual#positionTopLeftPrevious">positionTopLeftPrevious</a>, <a href="../symbols/pulse.Visual#rotation">rotation</a>, <a href="../symbols/pulse.Visual#rotationPrevious">rotationPrevious</a>, <a href="../symbols/pulse.Visual#runningActions">runningActions</a>, <a href="../symbols/pulse.Visual#scale">scale</a>, <a href="../symbols/pulse.Visual#scalePrevious">scalePrevious</a>, <a href="../symbols/pulse.Visual#shadowBlur">shadowBlur</a>, <a href="../symbols/pulse.Visual#shadowColor">shadowColor</a>, <a href="../symbols/pulse.Visual#shadowEnabled">shadowEnabled</a>, <a href="../symbols/pulse.Visual#shadowEnabledPrevious">shadowEnabledPrevious</a>, <a href="../symbols/pulse.Visual#shadowOffsetX">shadowOffsetX</a>, <a href="../symbols/pulse.Visual#shadowOffsetY">shadowOffsetY</a>, <a href="../symbols/pulse.Visual#shuffled">shuffled</a>, <a href="../symbols/pulse.Visual#size">size</a>, <a href="../symbols/pulse.Visual#sizePrevious">sizePrevious</a>, <a href="../symbols/pulse.Visual#updated">updated</a>, <a href="../symbols/pulse.Visual#visible">visible</a>, <a href="../symbols/pulse.Visual#visiblePrevious">visiblePrevious</a>, <a href="../symbols/pulse.Visual#zindex">zindex</a>, <a href="../symbols/pulse.Visual#zindexPrevious">zindexPrevious</a></dd><dt>Fields borrowed from class <a href="../symbols/pulse.Node">pulse.Node</a>: </dt><dd><a href="../symbols/pulse.Node#name">name</a>, <a href="../symbols/pulse.Node#parent">parent</a></dd>
		</dl>
		
	

<!-- ============================== methods summary ======================== -->
	
		
		
		<table class="summaryTable" cellspacing="0" summary="A summary of the methods documented in the class pulse.Sprite.">
			<caption>Method Summary</caption>
			<thead>
				<tr>
					<th scope="col">Method Attributes</th>
					<th scope="col">Method Name and Description</th>
				</tr>
			</thead>
			<tbody>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#addAction">addAction</a></b>(options)
						</div>
						<div class="description">Adds an action to this sprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#calculateProperties">calculateProperties</a></b>()
						</div>
						<div class="description">Sets the texture frame width and height.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#draw">draw</a></b>(ctx, transform)
						</div>
						<div class="description">Draws this sprite to passed in context</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#eventsCallback">eventsCallback</a></b>(type, evt)
						</div>
						<div class="description">Handles all events sent to this object.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#getCurrentFrame">getCurrentFrame</a></b>()
						</div>
						<div class="description">Returns the current frame as a canvas object, ready to draw.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#inCurrentBounds">inCurrentBounds</a></b>(x, y)
						</div>
						<div class="description">Checks if the x and y position passed in is a point inside of thissprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#itemDroppedCallback">itemDroppedCallback</a></b>(e)
						</div>
						<div class="description">Item dropped callback</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#killDrag">killDrag</a></b>(evt)
						</div>
						<div class="description">Ends dragging for this sprite.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#loaded">loaded</a></b>()
						</div>
						<div class="description">Returns true if the image for this sprite has been loaded</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#update">update</a></b>(time)
						</div>
						<div class="description">Sprite's update function calculates the size based on currentimage or animation and then calls the super update.</div>
					</td>
				</tr>
			
			</tbody>
		</table>
		

		
		<dl class="inheritsList">
		<dt>Methods borrowed from class <a href="../symbols/pulse.Visual">pulse.Visual</a>: </dt><dd><a href="../symbols/pulse.Visual#getAction">getAction</a>, <a href="../symbols/pulse.Visual#move">move</a>, <a href="../symbols/pulse.Visual#on">on</a>, <a href="../symbols/pulse.Visual#runAction">runAction</a></dd>
		</dl>
		
	
<!-- ============================== events summary ======================== -->
	
		
		
		<table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class pulse.Sprite.">
			<caption>Event Summary</caption>
			<thead>
				<tr>
					<th scope="col">Event Attributes</th>
					<th scope="col">Event Name and Description</th>
				</tr>
			</thead>
			<tbody>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:click">click</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse button is clicked while pointer is over this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:dragdrop">dragdrop</a></b>(evt)
						</div>
						<div class="description">Event rose when this node is dropped after being dragged.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:dragenter">dragenter</a></b>(evt)
						</div>
						<div class="description">Event rose when a dragged node is just beginning to be on top of thisnode.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:dragexit">dragexit</a></b>(evt)
						</div>
						<div class="description">Event rose when a dragged node is no longer over top of this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:dragover">dragover</a></b>(evt)
						</div>
						<div class="description">Event rose when a dragged node is over top of this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:dragstart">dragstart</a></b>(evt)
						</div>
						<div class="description">Event rose when this node is starting to be dragged.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:itemdropped">itemdropped</a></b>(evt)
						</div>
						<div class="description">Event rose when a node is dropped on top of this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:mousedown">mousedown</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse button is pressed down while pointer is overthis node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:mousemove">mousemove</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse is moved while pointer is over this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:mouseout">mouseout</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse leaves this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:mouseover">mouseover</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse pointer enters this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:mouseup">mouseup</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse button is released while pointer is over this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:mousewheel">mousewheel</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse wheel is scrolled while pointer is over this node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:touchend">touchend</a></b>(evt)
						</div>
						<div class="description">Event rose when the user releases their touch on the node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:touchmove">touchmove</a></b>(evt)
						</div>
						<div class="description">Event rose when the user scrolls while tapping on the node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Sprite#event:touchstart">touchstart</a></b>(evt)
						</div>
						<div class="description">Event rose when the user presses down on the node.</div>
					</td>
				</tr>
			
			</tbody>
		</table>
		

		
		<dl class="inheritsList">
		
		</dl>
		
	

<!-- ============================== constructor details ==================== -->
	
	<div class="details"><a name="constructor"> </a>
		<div class="sectionTitle">
			Class Detail
		</div>

		<div class="fixedFont">
				<b>pulse.Sprite</b>(params)
		</div>

		<div class="description">
			Sprites are the basic object for moving, animated graphics onthe screen. They have an image, the sprite sheet, which is acollection of "frames" that can be played in succession toproduce an animation.
		</div>

		


			
				<dl class="detailList">
				<dt class="heading">Parameters:</dt>
				
					<dt>
						<span class="light fixedFont">{object}</span>  <b>params</b>
						
					</dt>
						<dd>parameters that can be set as initialized optionson the node</dd>
				
					<dt>
						<span class="light fixedFont">{string|<a href="../symbols/pulse.Texture">pulse.Texture</a>}</span>  <b>params.src</b>
						
					</dt>
						<dd>the texture filename to use or apulse.Texture to use</dd>
				
					<dt>
						<span class="light fixedFont">{string}</span>  <b>params.name</b>
						<i>Optional</i>
					</dt>
						<dd>name of the node</dd>
				
					<dt>
						<span class="light fixedFont">{size}</span>  <b>params.size</b>
						<i>Optional</i>
					</dt>
						<dd>initial size width and height to use for the sprite</dd>
				
				</dl>
			
			
			
			
			
			
			

	</div>
	

<!-- ============================== field details ========================== -->
	
		<div class="sectionTitle">
			Field Detail
		</div>
		
			<a name="dragDropEnabled"> </a>
			<div class="fixedFont">

			
			<b>dragDropEnabled</b>

			</div>
			<div class="description">
				Determines if object can be drag and dropped
			</div>

			

				
				
				
				

			<hr />
		
			<a name="draggedOverItems"> </a>
			<div class="fixedFont">

			
			<b>draggedOverItems</b>

			</div>
			<div class="description">
				The current items that are being dragged over this object
			</div>

			

				
				
				
				

			<hr />
		
			<a name="dragMoveEnabled"> </a>
			<div class="fixedFont">

			
			<b>dragMoveEnabled</b>

			</div>
			<div class="description">
				Determines if the object actually moves when being dragged and dropped
			</div>

			

				
				
				
				

			<hr />
		
			<a name="dropAcceptEnabled"> </a>
			<div class="fixedFont">

			
			<b>dropAcceptEnabled</b>

			</div>
			<div class="description">
				Determines if object can be dropped on this object
			</div>

			

				
				
				
				

			<hr />
		
			<a name="handleAllEvents"> </a>
			<div class="fixedFont">

			
			<b>handleAllEvents</b>

			</div>
			<div class="description">
				Property that signifies if this sprite should handle all events.
			</div>

			

				
				
				
				

			<hr />
		
			<a name=".HIT_TEST_CONVEX"> </a>
			<div class="fixedFont">&lt;static&gt; 

			
			<span class="light">pulse.Sprite.</span><b>HIT_TEST_CONVEX</b>

			</div>
			<div class="description">
				Definition for hit test constant for convex shape checking.
			</div>

			

				
				
				
				

			<hr />
		
			<a name=".HIT_TEST_RECT"> </a>
			<div class="fixedFont">&lt;static&gt; 

			
			<span class="light">pulse.Sprite.</span><b>HIT_TEST_RECT</b>

			</div>
			<div class="description">
				Definition for hit test constant for rectangle checking.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="hitTestPoints"> </a>
			<div class="fixedFont">

			
			<b>hitTestPoints</b>

			</div>
			<div class="description">
				The points to check against for checking if point is in bounds. Ifrectangular points order is top left, bottom right. If convexshape start in upper left and move clockwise.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="hitTestType"> </a>
			<div class="fixedFont">

			
			<b>hitTestType</b>

			</div>
			<div class="description">
				The type of hit testing to use.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="texture"> </a>
			<div class="fixedFont">

			
			<b>texture</b>

			</div>
			<div class="description">
				The texture being used for this sprite.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="textureFrame"> </a>
			<div class="fixedFont">

			
			<b>textureFrame</b>

			</div>
			<div class="description">
				The current frame slice for this sprite.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="textureFramePrevious"> </a>
			<div class="fixedFont">

			
			<b>textureFramePrevious</b>

			</div>
			<div class="description">
				The previous texture frame slice for this sprite.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="texturePrevious"> </a>
			<div class="fixedFont">

			
			<b>texturePrevious</b>

			</div>
			<div class="description">
				The previous texture being used for this sprite.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="textureUpdated"> </a>
			<div class="fixedFont">

			
			<b>textureUpdated</b>

			</div>
			<div class="description">
				Whether the texture frame or texture has been updated.
			</div>

			

				
				
				
				

			
		
	

<!-- ============================== method details ========================= -->
	
		<div class="sectionTitle">
			Method Detail
		</div>
		
			<a name="addAction"> </a>
			<div class="fixedFont">

			
			<b>addAction</b>(options)

			</div>
			<div class="description">
				Adds an action to this sprite. The params passed in must either bean Action or the constructor params for an AnimateAction.See the AnimateAction object for more information.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{object}</span> <b>options</b>
							
						</dt>
						<dd>for the new animation</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="calculateProperties"> </a>
			<div class="fixedFont">

			
			<b>calculateProperties</b>()

			</div>
			<div class="description">
				Sets the texture frame width and height.
			</div>

			

				
				
				
				
				
				
				

			<hr />
		
			<a name="draw"> </a>
			<div class="fixedFont">

			
			<b>draw</b>(ctx, transform)

			</div>
			<div class="description">
				Draws this sprite to passed in context
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{CanvasRenderingContext2D}</span> <b>ctx</b>
							
						</dt>
						<dd>the context in which to draw thisvisual on</dd>
					
						<dt>
							<b>transform</b>
							
						</dt>
						<dd></dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="eventsCallback"> </a>
			<div class="fixedFont">

			
			<b>eventsCallback</b>(type, evt)

			</div>
			<div class="description">
				Handles all events sent to this object. If event is mousedown then apotential drag and drop action is handled.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{string}</span> <b>type</b>
							
						</dt>
						<dd>the type of event raised</dd>
					
						<dt>
							<span class="light fixedFont">{object}</span> <b>evt</b>
							
						</dt>
						<dd>the event object with properties on the event</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="getCurrentFrame"> </a>
			<div class="fixedFont">

			<span class="light">{object}</span>
			<b>getCurrentFrame</b>()

			</div>
			<div class="description">
				Returns the current frame as a canvas object, ready to draw.
			</div>

			

				
				
				
				
				
					<dl class="detailList">
					<dt class="heading">Returns:</dt>
					
						<dd><span class="light fixedFont">{object}</span> the frame.</dd>
					
					</dl>
				
				
				

			<hr />
		
			<a name="inCurrentBounds"> </a>
			<div class="fixedFont">

			<span class="light">{boolean}</span>
			<b>inCurrentBounds</b>(x, y)

			</div>
			<div class="description">
				Checks if the x and y position passed in is a point inside of thissprite. This function will calculate the inclusion using one threemethods based on the hitTestType property on this object. If the typeis set to "rect" then will check the x and y against a rectangle ofeither the 2 corners set in hitTestPoints or the bounds of this objectif there are no points set. The second type "convex" will be tested usingPNPOLY (Point Inclusion in Polygon Test) from W. Randolph Franklin (WRF).See http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.htmlfor more information on the algorithm.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>x</b>
							
						</dt>
						<dd>position to check</dd>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>y</b>
							
						</dt>
						<dd>position to check</dd>
					
					</dl>
				
				
				
				
				
					<dl class="detailList">
					<dt class="heading">Returns:</dt>
					
						<dd><span class="light fixedFont">{boolean}</span> true if point passed is inside this sprite</dd>
					
					</dl>
				
				
				

			<hr />
		
			<a name="itemDroppedCallback"> </a>
			<div class="fixedFont">

			
			<b>itemDroppedCallback</b>(e)

			</div>
			<div class="description">
				Item dropped callback
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<b>e</b>
							
						</dt>
						<dd></dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="killDrag"> </a>
			<div class="fixedFont">

			
			<b>killDrag</b>(evt)

			</div>
			<div class="description">
				Ends dragging for this sprite.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{HTMLEvent}</span> <b>evt</b>
							
						</dt>
						<dd>the raw event from the browser</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="loaded"> </a>
			<div class="fixedFont">

			<span class="light">{boolean}</span>
			<b>loaded</b>()

			</div>
			<div class="description">
				Returns true if the image for this sprite has been loaded
			</div>

			

				
				
				
				
				
					<dl class="detailList">
					<dt class="heading">Returns:</dt>
					
						<dd><span class="light fixedFont">{boolean}</span> Whether image has been loaded</dd>
					
					</dl>
				
				
				

			<hr />
		
			<a name="update"> </a>
			<div class="fixedFont">

			
			<b>update</b>(time)

			</div>
			<div class="description">
				Sprite's update function calculates the size based on currentimage or animation and then calls the super update.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>time</b>
							
						</dt>
						<dd>elapsed since last update call in milliseconds</dd>
					
					</dl>
				
				
				
				
				
				
				

			
		
	

<!-- ============================== event details ========================= -->
	
		<div class="sectionTitle">
			Event Detail
		</div>
		
			<a name="event:click"> </a>
			<div class="fixedFont">

			
			<b>click</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse button is clicked while pointer is over this node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:dragdrop"> </a>
			<div class="fixedFont">

			
			<b>dragdrop</b>(evt)

			</div>
			<div class="description">
				Event rose when this node is dropped after being dragged.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event that ended the drag.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:dragenter"> </a>
			<div class="fixedFont">

			
			<b>dragenter</b>(evt)

			</div>
			<div class="description">
				Event rose when a dragged node is just beginning to be on top of thisnode. In order to recieve these events a node must have dropEnabledset to true.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event for the dragged node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:dragexit"> </a>
			<div class="fixedFont">

			
			<b>dragexit</b>(evt)

			</div>
			<div class="description">
				Event rose when a dragged node is no longer over top of this node. Inorder to recieve these events a node must have dropEnabled set to true.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event for the dragged node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:dragover"> </a>
			<div class="fixedFont">

			
			<b>dragover</b>(evt)

			</div>
			<div class="description">
				Event rose when a dragged node is over top of this node. In order torecieve these events a node must have dropEnabled set to true.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event for the dragged node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:dragstart"> </a>
			<div class="fixedFont">

			
			<b>dragstart</b>(evt)

			</div>
			<div class="description">
				Event rose when this node is starting to be dragged.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event that started the drag.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:itemdropped"> </a>
			<div class="fixedFont">

			
			<b>itemdropped</b>(evt)

			</div>
			<div class="description">
				Event rose when a node is dropped on top of this node. In order torecieve these events a node must have dropEnabled set to true.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event for dropped node.</dd>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.Sprite">pulse.Sprite</a>}</span> <b>evt.target</b>
							
						</dt>
						<dd>The target is set to the node being droppedupon.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mousedown"> </a>
			<div class="fixedFont">

			
			<b>mousedown</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse button is pressed down while pointer is overthis node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mousemove"> </a>
			<div class="fixedFont">

			
			<b>mousemove</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse is moved while pointer is over this node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mouseout"> </a>
			<div class="fixedFont">

			
			<b>mouseout</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse leaves this node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mouseover"> </a>
			<div class="fixedFont">

			
			<b>mouseover</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse pointer enters this node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mouseup"> </a>
			<div class="fixedFont">

			
			<b>mouseup</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse button is released while pointer is over this node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mousewheel"> </a>
			<div class="fixedFont">

			
			<b>mousewheel</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse wheel is scrolled while pointer is over this node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:touchend"> </a>
			<div class="fixedFont">

			
			<b>touchend</b>(evt)

			</div>
			<div class="description">
				Event rose when the user releases their touch on the node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.TouchEvent">pulse.TouchEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The touch event for dropped node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:touchmove"> </a>
			<div class="fixedFont">

			
			<b>touchmove</b>(evt)

			</div>
			<div class="description">
				Event rose when the user scrolls while tapping on the node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.TouchEvent">pulse.TouchEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The touch event for dropped node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:touchstart"> </a>
			<div class="fixedFont">

			
			<b>touchstart</b>(evt)

			</div>
			<div class="description">
				Event rose when the user presses down on the node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.TouchEvent">pulse.TouchEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The touch event for dropped node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			
		
	
</div>